/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

import Models.FeedModel;
import Models.HarvestModel;
import Models.WaterModel;
import Repositories.RepositoryProvider;
import java.awt.CardLayout;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hp
 */
public class MainMenuView extends javax.swing.JFrame {

    /**
     * Creates new form MainMenuView
     */
    
    private SimpleDateFormat sdm;
    private int FeedSelectedID;
    private int WaterSelectedID;
    private int HarvestSelectedID;
    private enum PropType { Feed, Water, Harvest }
    
    public MainMenuView() {
        initComponents();
        
        sdm = new SimpleDateFormat("dd/MM/yyyy hh:mm aa");
        
        ResetSelectedIDs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Topbar = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        Sidebar = new javax.swing.JPanel();
        FeedViewBtn = new javax.swing.JButton();
        WaterViewBtn = new javax.swing.JButton();
        HarvestViewBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        DashboardViewBtn = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        FragmentManager = new javax.swing.JPanel();
        DashboardFragment = new javax.swing.JPanel();
        FeedPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        TotalFeedLabel = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        WaterPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        TotalWaterLabel = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        HarvestPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        TotalHarvestLabel = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        RefreshTotalAmounts = new javax.swing.JButton();
        MonthlyFeedPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        MonthlyAverageFeedConsumptionLabel = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        FeedFragment = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        FeedsTable = new javax.swing.JTable();
        RefreshFeedBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        AddFeedPrice = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        SubmitFeedBtn = new javax.swing.JButton();
        AddFeedAmount = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        AddConsumeFeedCB = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        UpdateFeedPrice = new javax.swing.JTextField();
        UpdateFeedBtn = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        UpdateFeedAmount = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        UpdateFeedID = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        DeleteFeedBtn = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        WaterFragment = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        WatersTable = new javax.swing.JTable();
        RefreshWaterBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        AddWaterAmount = new javax.swing.JTextField();
        SubmitWaterBtn = new javax.swing.JButton();
        AddConsumeWaterCB = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        UpdateWaterBtn = new javax.swing.JButton();
        UpdateWaterAmount = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        UpdateWaterID = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        DeleteWaterBtn = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        HarvestFragment = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        HarvestsTable = new javax.swing.JTable();
        RefreshHarvestBtn = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        AddHarvestAmount = new javax.swing.JTextField();
        SubmitHarvestBtn = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        AddConsumeHarvestCB = new javax.swing.JComboBox<>();
        jPanel6 = new javax.swing.JPanel();
        UpdateHarvestBtn = new javax.swing.JButton();
        UpdateHarvestAmount = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        UpdateHarvestID = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        DeleteHarvestBtn = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1485, 820));
        setSize(new java.awt.Dimension(1500, 1050));

        Topbar.setBackground(new java.awt.Color(237, 180, 106));

        jLabel5.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(14, 79, 85));
        jLabel5.setText("Inventory Management System");

        javax.swing.GroupLayout TopbarLayout = new javax.swing.GroupLayout(Topbar);
        Topbar.setLayout(TopbarLayout);
        TopbarLayout.setHorizontalGroup(
            TopbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TopbarLayout.createSequentialGroup()
                .addContainerGap(476, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(472, 472, 472))
        );
        TopbarLayout.setVerticalGroup(
            TopbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TopbarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        Sidebar.setBackground(new java.awt.Color(14, 79, 85));
        Sidebar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        FeedViewBtn.setBackground(new java.awt.Color(14, 79, 85));
        FeedViewBtn.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        FeedViewBtn.setForeground(new java.awt.Color(255, 255, 255));
        FeedViewBtn.setText("   FEED");
        FeedViewBtn.setBorder(null);
        FeedViewBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        FeedViewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FeedViewBtnActionPerformed(evt);
            }
        });
        Sidebar.add(FeedViewBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 270, 40));

        WaterViewBtn.setBackground(new java.awt.Color(14, 79, 85));
        WaterViewBtn.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        WaterViewBtn.setForeground(new java.awt.Color(255, 255, 255));
        WaterViewBtn.setText("   WATER");
        WaterViewBtn.setBorder(null);
        WaterViewBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        WaterViewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WaterViewBtnActionPerformed(evt);
            }
        });
        Sidebar.add(WaterViewBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 270, 40));

        HarvestViewBtn.setBackground(new java.awt.Color(14, 79, 85));
        HarvestViewBtn.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        HarvestViewBtn.setForeground(new java.awt.Color(255, 255, 255));
        HarvestViewBtn.setText("   HARVEST");
        HarvestViewBtn.setBorder(null);
        HarvestViewBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        HarvestViewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HarvestViewBtnActionPerformed(evt);
            }
        });
        Sidebar.add(HarvestViewBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 270, 40));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Welcome,");
        Sidebar.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(106, 23, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Admin");
        Sidebar.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(106, 58, -1, -1));
        Sidebar.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 90, 70));

        DashboardViewBtn.setBackground(new java.awt.Color(14, 79, 85));
        DashboardViewBtn.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        DashboardViewBtn.setForeground(new java.awt.Color(255, 255, 255));
        DashboardViewBtn.setText("   DASHBOARD");
        DashboardViewBtn.setBorder(null);
        DashboardViewBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DashboardViewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DashboardViewBtnActionPerformed(evt);
            }
        });
        Sidebar.add(DashboardViewBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 270, 40));

        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));
        Sidebar.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 310, 20));

        FragmentManager.setLayout(new java.awt.CardLayout());

        DashboardFragment.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        FeedPanel.setBackground(new java.awt.Color(164, 196, 181));
        FeedPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        FeedPanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel9.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Total Feed");
        FeedPanel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, -1, -1));

        TotalFeedLabel.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 40)); // NOI18N
        TotalFeedLabel.setForeground(new java.awt.Color(255, 255, 255));
        TotalFeedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TotalFeedLabel.setText("0.0");
        FeedPanel.add(TotalFeedLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 50, -1, -1));

        jLabel13.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 30)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("kg");
        FeedPanel.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 100, -1, -1));

        DashboardFragment.add(FeedPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 40, 530, 140));

        WaterPanel.setBackground(new java.awt.Color(164, 196, 181));
        WaterPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        WaterPanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel10.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Total Water");
        WaterPanel.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, -1, -1));

        TotalWaterLabel.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 40)); // NOI18N
        TotalWaterLabel.setForeground(new java.awt.Color(255, 255, 255));
        TotalWaterLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TotalWaterLabel.setText("0.0");
        WaterPanel.add(TotalWaterLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 50, -1, -1));

        jLabel16.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 30)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("L");
        WaterPanel.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 100, -1, -1));

        DashboardFragment.add(WaterPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, 530, 140));

        HarvestPanel.setBackground(new java.awt.Color(164, 196, 181));
        HarvestPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        HarvestPanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel8.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Total Harvest");
        HarvestPanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, -1, -1));

        TotalHarvestLabel.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 40)); // NOI18N
        TotalHarvestLabel.setForeground(new java.awt.Color(255, 255, 255));
        TotalHarvestLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TotalHarvestLabel.setText("0");
        HarvestPanel.add(TotalHarvestLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 50, -1, 40));

        jLabel26.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 30)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setText("pcs");
        HarvestPanel.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 100, -1, -1));

        DashboardFragment.add(HarvestPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 210, 530, 140));

        RefreshTotalAmounts.setBackground(new java.awt.Color(237, 180, 106));
        RefreshTotalAmounts.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        RefreshTotalAmounts.setForeground(new java.awt.Color(14, 79, 85));
        RefreshTotalAmounts.setText("Refresh Amounts");
        RefreshTotalAmounts.setBorder(null);
        RefreshTotalAmounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshTotalAmountsActionPerformed(evt);
            }
        });
        DashboardFragment.add(RefreshTotalAmounts, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 590, 230, 50));

        MonthlyFeedPanel.setBackground(new java.awt.Color(164, 196, 181));
        MonthlyFeedPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        MonthlyFeedPanel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel12.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 24)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Monthly Average of Feed Consumption");
        MonthlyFeedPanel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, -1, -1));

        MonthlyAverageFeedConsumptionLabel.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 40)); // NOI18N
        MonthlyAverageFeedConsumptionLabel.setForeground(new java.awt.Color(255, 255, 255));
        MonthlyAverageFeedConsumptionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MonthlyAverageFeedConsumptionLabel.setText("0.0");
        MonthlyFeedPanel.add(MonthlyAverageFeedConsumptionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 50, -1, -1));

        jLabel27.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 30)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText("kg");
        MonthlyFeedPanel.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 100, -1, -1));

        DashboardFragment.add(MonthlyFeedPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 530, 140));

        FragmentManager.add(DashboardFragment, "card2");

        FeedFragment.setForeground(new java.awt.Color(14, 79, 85));
        FeedFragment.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        FeedsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id", "Amount (kg)", "Price (Php)", "Date"
            }
        ));
        FeedsTable.setPreferredSize(new java.awt.Dimension(225, 100));
        FeedsTable.getTableHeader().setReorderingAllowed(false);
        FeedsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                FeedsTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(FeedsTable);

        FeedFragment.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 1110, 400));

        RefreshFeedBtn.setBackground(new java.awt.Color(237, 180, 106));
        RefreshFeedBtn.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        RefreshFeedBtn.setForeground(new java.awt.Color(14, 79, 85));
        RefreshFeedBtn.setText("Refresh Feeds");
        RefreshFeedBtn.setBorder(null);
        RefreshFeedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshFeedBtnActionPerformed(evt);
            }
        });
        FeedFragment.add(RefreshFeedBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 430, 190, 40));

        jPanel1.setBackground(new java.awt.Color(164, 196, 181));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        AddFeedPrice.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        jPanel1.add(AddFeedPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 50, 210, 40));

        jLabel15.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(14, 79, 85));
        jLabel15.setText("Price :");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, -1, -1));

        SubmitFeedBtn.setBackground(new java.awt.Color(237, 180, 106));
        SubmitFeedBtn.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        SubmitFeedBtn.setForeground(new java.awt.Color(14, 79, 85));
        SubmitFeedBtn.setText("Submit Feed");
        SubmitFeedBtn.setBorder(null);
        SubmitFeedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitFeedBtnActionPerformed(evt);
            }
        });
        jPanel1.add(SubmitFeedBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 210, 40));

        AddFeedAmount.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        jPanel1.add(AddFeedAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 210, 40));

        jLabel14.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(14, 79, 85));
        jLabel14.setText("Amount(kg) :");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        AddConsumeFeedCB.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        AddConsumeFeedCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Add Feed", "Consume Feed" }));
        jPanel1.add(AddConsumeFeedCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 210, 40));

        FeedFragment.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, 470, 170));

        jPanel2.setBackground(new java.awt.Color(164, 196, 181));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        UpdateFeedPrice.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        jPanel2.add(UpdateFeedPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 50, 210, 40));

        UpdateFeedBtn.setBackground(new java.awt.Color(237, 180, 106));
        UpdateFeedBtn.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        UpdateFeedBtn.setForeground(new java.awt.Color(14, 79, 85));
        UpdateFeedBtn.setText("Update Feed");
        UpdateFeedBtn.setBorder(null);
        UpdateFeedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateFeedBtnActionPerformed(evt);
            }
        });
        jPanel2.add(UpdateFeedBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 110, 210, 40));

        jLabel18.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(14, 79, 85));
        jLabel18.setText("Price :");
        jPanel2.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, -1, -1));

        UpdateFeedAmount.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        jPanel2.add(UpdateFeedAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 210, 40));

        jLabel17.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(14, 79, 85));
        jLabel17.setText("Amount(kg) :");
        jPanel2.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, -1, -1));

        UpdateFeedID.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        UpdateFeedID.setForeground(new java.awt.Color(14, 79, 85));
        UpdateFeedID.setText("?");
        jPanel2.add(UpdateFeedID, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        jLabel25.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(14, 79, 85));
        jLabel25.setText("ID :");
        jPanel2.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        DeleteFeedBtn.setBackground(new java.awt.Color(237, 180, 106));
        DeleteFeedBtn.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        DeleteFeedBtn.setForeground(new java.awt.Color(14, 79, 85));
        DeleteFeedBtn.setText("Delete Feed");
        DeleteFeedBtn.setBorder(null);
        DeleteFeedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteFeedBtnActionPerformed(evt);
            }
        });
        jPanel2.add(DeleteFeedBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 210, 40));
        jPanel2.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        FeedFragment.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 490, 610, 170));

        FragmentManager.add(FeedFragment, "card3");

        WaterFragment.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        WatersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Amount (L)", "Date"
            }
        ));
        WatersTable.getTableHeader().setReorderingAllowed(false);
        WatersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                WatersTableMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(WatersTable);

        WaterFragment.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 1110, 400));

        RefreshWaterBtn.setBackground(new java.awt.Color(237, 180, 106));
        RefreshWaterBtn.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        RefreshWaterBtn.setForeground(new java.awt.Color(14, 79, 85));
        RefreshWaterBtn.setText("Refresh Waters");
        RefreshWaterBtn.setBorder(null);
        RefreshWaterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshWaterBtnActionPerformed(evt);
            }
        });
        WaterFragment.add(RefreshWaterBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 430, 190, 40));

        jPanel3.setBackground(new java.awt.Color(164, 196, 181));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel19.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(14, 79, 85));
        jLabel19.setText("Amount(L) :");
        jPanel3.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        AddWaterAmount.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 24)); // NOI18N
        jPanel3.add(AddWaterAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 430, 40));

        SubmitWaterBtn.setBackground(new java.awt.Color(237, 180, 106));
        SubmitWaterBtn.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        SubmitWaterBtn.setForeground(new java.awt.Color(14, 79, 85));
        SubmitWaterBtn.setText("Submit Water");
        SubmitWaterBtn.setBorder(null);
        SubmitWaterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitWaterBtnActionPerformed(evt);
            }
        });
        jPanel3.add(SubmitWaterBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 210, 40));

        AddConsumeWaterCB.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        AddConsumeWaterCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Add Water", "Consume Water" }));
        jPanel3.add(AddConsumeWaterCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 210, 40));

        WaterFragment.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, 470, 170));

        jPanel4.setBackground(new java.awt.Color(164, 196, 181));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        UpdateWaterBtn.setBackground(new java.awt.Color(237, 180, 106));
        UpdateWaterBtn.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        UpdateWaterBtn.setForeground(new java.awt.Color(14, 79, 85));
        UpdateWaterBtn.setText("Update Water");
        UpdateWaterBtn.setBorder(null);
        UpdateWaterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateWaterBtnActionPerformed(evt);
            }
        });
        jPanel4.add(UpdateWaterBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 110, 210, 40));

        UpdateWaterAmount.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 24)); // NOI18N
        jPanel4.add(UpdateWaterAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 440, 40));

        jLabel21.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(14, 79, 85));
        jLabel21.setText("Amount(L) :");
        jPanel4.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, -1, -1));

        UpdateWaterID.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        UpdateWaterID.setForeground(new java.awt.Color(14, 79, 85));
        UpdateWaterID.setText("?");
        jPanel4.add(UpdateWaterID, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        jLabel20.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(14, 79, 85));
        jLabel20.setText("ID :");
        jPanel4.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        DeleteWaterBtn.setBackground(new java.awt.Color(237, 180, 106));
        DeleteWaterBtn.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        DeleteWaterBtn.setForeground(new java.awt.Color(14, 79, 85));
        DeleteWaterBtn.setText("Delete Water");
        DeleteWaterBtn.setBorder(null);
        DeleteWaterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteWaterBtnActionPerformed(evt);
            }
        });
        jPanel4.add(DeleteWaterBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 210, 40));
        jPanel4.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        WaterFragment.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 490, 610, 170));

        FragmentManager.add(WaterFragment, "card5");

        HarvestFragment.setForeground(new java.awt.Color(14, 79, 85));
        HarvestFragment.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        HarvestsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Amount (Per Chicken)", "Date"
            }
        ));
        HarvestsTable.getTableHeader().setReorderingAllowed(false);
        HarvestsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                HarvestsTableMousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(HarvestsTable);

        HarvestFragment.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 1110, 400));

        RefreshHarvestBtn.setBackground(new java.awt.Color(237, 180, 106));
        RefreshHarvestBtn.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        RefreshHarvestBtn.setForeground(new java.awt.Color(14, 79, 85));
        RefreshHarvestBtn.setText("Refresh Harvests");
        RefreshHarvestBtn.setBorder(null);
        RefreshHarvestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshHarvestBtnActionPerformed(evt);
            }
        });
        HarvestFragment.add(RefreshHarvestBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 430, 190, 40));

        jPanel5.setBackground(new java.awt.Color(164, 196, 181));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        AddHarvestAmount.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 24)); // NOI18N
        jPanel5.add(AddHarvestAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 430, 40));

        SubmitHarvestBtn.setBackground(new java.awt.Color(237, 180, 106));
        SubmitHarvestBtn.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        SubmitHarvestBtn.setForeground(new java.awt.Color(14, 79, 85));
        SubmitHarvestBtn.setText("Add Harvest");
        SubmitHarvestBtn.setBorder(null);
        SubmitHarvestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitHarvestBtnActionPerformed(evt);
            }
        });
        jPanel5.add(SubmitHarvestBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 210, 40));

        jLabel22.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(14, 79, 85));
        jLabel22.setText("Amount(Per Chicken) :");
        jPanel5.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        AddConsumeHarvestCB.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        AddConsumeHarvestCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Add Harvest", "Consume Harvest" }));
        jPanel5.add(AddConsumeHarvestCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 210, 40));

        HarvestFragment.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, 470, 170));

        jPanel6.setBackground(new java.awt.Color(164, 196, 181));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        UpdateHarvestBtn.setBackground(new java.awt.Color(237, 180, 106));
        UpdateHarvestBtn.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        UpdateHarvestBtn.setForeground(new java.awt.Color(14, 79, 85));
        UpdateHarvestBtn.setText("Update Harvest");
        UpdateHarvestBtn.setBorder(null);
        UpdateHarvestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateHarvestBtnActionPerformed(evt);
            }
        });
        jPanel6.add(UpdateHarvestBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 110, 210, 40));

        UpdateHarvestAmount.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 24)); // NOI18N
        jPanel6.add(UpdateHarvestAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 440, 40));

        jLabel24.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(14, 79, 85));
        jLabel24.setText("Amount(Per Chicken) :");
        jPanel6.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, -1, -1));

        UpdateHarvestID.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        UpdateHarvestID.setForeground(new java.awt.Color(14, 79, 85));
        UpdateHarvestID.setText("?");
        jPanel6.add(UpdateHarvestID, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        jLabel23.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(14, 79, 85));
        jLabel23.setText("ID :");
        jPanel6.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        DeleteHarvestBtn.setBackground(new java.awt.Color(237, 180, 106));
        DeleteHarvestBtn.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 20)); // NOI18N
        DeleteHarvestBtn.setForeground(new java.awt.Color(14, 79, 85));
        DeleteHarvestBtn.setText("Delete Harvest");
        DeleteHarvestBtn.setBorder(null);
        DeleteHarvestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteHarvestBtnActionPerformed(evt);
            }
        });
        jPanel6.add(DeleteHarvestBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 210, 40));
        jPanel6.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        HarvestFragment.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 490, 610, 170));

        FragmentManager.add(HarvestFragment, "card4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Sidebar, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FragmentManager, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(Topbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Topbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Sidebar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FragmentManager, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ResetInputs() {
        AddFeedAmount.setText("");
        AddFeedPrice.setText("");
        UpdateFeedID.setText("?");
        UpdateFeedAmount.setText("");
        UpdateFeedPrice.setText("");
        
        AddWaterAmount.setText("");
        UpdateWaterID.setText("?");
        UpdateWaterAmount.setText("");
        
        AddHarvestAmount.setText("");
        UpdateHarvestID.setText("?");
        UpdateHarvestAmount.setText("");
        
        ResetSelectedIDs();
    }
    
    private void ResetSelectedIDs() {
        FeedSelectedID = -1;
        WaterSelectedID = -1;
        HarvestSelectedID = -1;
    }
    
    private void LoadTableAsync(PropType ptype) {
        Thread t = new Thread(
            new Runnable() {
                @Override
                public void run() {
                    LoadTable(ptype);
                }
            }
        );
        t.setDaemon(true);
        t.start();
    }
    
    private void LoadTable(PropType ptype) {
        DefaultTableModel DTM = new DefaultTableModel();
                
        switch(ptype) {
            case Feed:
                DTM.setColumnIdentifiers(new Object[] {"Id", "Amount (kg)", "Price (Php)", "Date"});
                
                ArrayList<FeedModel> feeds = RepositoryProvider.getProvider().getFeedRepo().getFeeds();
                feeds.stream().forEachOrdered(feedHolder -> {
                    DTM.addRow(new Object[] {
                        feedHolder.getId(),
                        feedHolder.getAmount(),
                        feedHolder.getPrice(),
                        sdm.format(feedHolder.getTimestamp())
                    });
                });
                
                FeedsTable.setModel(DTM);
                break;
            case Water:
                DTM.setColumnIdentifiers(new Object[] {"Id", "Amount (L)", "Date"});
                
                ArrayList<WaterModel> waters = RepositoryProvider.getProvider().getWaterRepo().getWaters();
                waters.stream().forEachOrdered(waterHolder -> {
                    DTM.addRow(new Object[] {
                        waterHolder.getId(),
                        waterHolder.getAmount(),
                        sdm.format(waterHolder.getTimestamp())
                    });
                });
                
                WatersTable.setModel(DTM);
                break;
            case Harvest:
                DTM.setColumnIdentifiers(new Object[] {"Id", "Amount (Per Chicken)", "Date"});
                
                ArrayList<HarvestModel> harvests = RepositoryProvider.getProvider().getHarvestRepo().getHarvests();
                harvests.stream().forEachOrdered(harvestHolder -> {
                    DTM.addRow(new Object[] {
                        harvestHolder.getId(),
                        harvestHolder.getAmount(),
                        sdm.format(harvestHolder.getTimestamp())
                    });
                });
                
                HarvestsTable.setModel(DTM);
                break;
        }
    }
    
    private void LoadTotalsAsync() {
        Thread t = new Thread(
            new Runnable() {
                @Override
                public void run() {
                    LoadTotals();
                }
            }
        );
        t.setDaemon(true);
        t.start();
    }
    
    private void LoadTotals() {
        TotalFeedLabel.setText(
            new DecimalFormat("#,###.##").format(RepositoryProvider.getProvider().getFeedRepo().getTotalFeeds())
        );
        TotalWaterLabel.setText(
            new DecimalFormat("#,###.##").format(RepositoryProvider.getProvider().getWaterRepo().getTotalFeeds())
        );
        TotalHarvestLabel.setText(
            Integer.toString(RepositoryProvider.getProvider().getHarvestRepo().getTotalFeeds())
        );
        MonthlyAverageFeedConsumptionLabel.setText(
            new DecimalFormat("#,###.##").format(RepositoryProvider.getProvider().getFeedRepo().getMonthlyAverageFeedConsumption())
        );
    }
    
    
    private void FeedViewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FeedViewBtnActionPerformed
        // TODO add your handling code here:
        ((CardLayout)FragmentManager.getLayout()).show(FragmentManager, "card3");
        ResetSelectedIDs();
        LoadTableAsync(PropType.Feed);
    }//GEN-LAST:event_FeedViewBtnActionPerformed

    private void WaterViewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WaterViewBtnActionPerformed
        // TODO add your handling code here:
        ((CardLayout)FragmentManager.getLayout()).show(FragmentManager, "card5");
        ResetSelectedIDs();
        LoadTableAsync(PropType.Water);
    }//GEN-LAST:event_WaterViewBtnActionPerformed

    private void HarvestViewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HarvestViewBtnActionPerformed
        // TODO add your handling code here:
        ((CardLayout)FragmentManager.getLayout()).show(FragmentManager, "card4");
        ResetSelectedIDs();
        LoadTableAsync(PropType.Harvest);
    }//GEN-LAST:event_HarvestViewBtnActionPerformed

    private void DashboardViewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DashboardViewBtnActionPerformed
        // TODO add your handling code here:
        ((CardLayout)FragmentManager.getLayout()).show(FragmentManager, "card2");
        ResetSelectedIDs();
        LoadTotalsAsync();
    }//GEN-LAST:event_DashboardViewBtnActionPerformed

    
    // FEED
    
    private void FeedsTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FeedsTableMousePressed
        // TODO add your handling code here:
        int rowSelected = FeedsTable.getSelectedRow();
        
        // Update [Update Feed Information]
        UpdateFeedID.setText(FeedsTable.getValueAt(rowSelected, 0).toString());
        UpdateFeedAmount.setText(FeedsTable.getValueAt(rowSelected, 1).toString());
        UpdateFeedPrice.setText(FeedsTable.getValueAt(rowSelected, 2).toString());
        
        // Update [Delete Feed Information]
        FeedSelectedID = Integer.parseInt(FeedsTable.getValueAt(rowSelected, 0).toString());
    }//GEN-LAST:event_FeedsTableMousePressed

    private void DeleteFeedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteFeedBtnActionPerformed
        // TODO add your handling code here:
        // Check Validity
        if(FeedSelectedID < 0) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Feed ID", "Delete Feed Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Assemble Class
        FeedModel feed = new FeedModel();
        feed.setId(FeedSelectedID);
        
        // Perform Operation
        RepositoryProvider.getProvider().getFeedRepo().deleteFeed(feed);
        
        // Success Message
        JOptionPane.showMessageDialog(rootPane, "Feed Entry Deleted Successfully", "Feed Info", JOptionPane.INFORMATION_MESSAGE);
        ResetInputs();
        LoadTableAsync(PropType.Feed);
    }//GEN-LAST:event_DeleteFeedBtnActionPerformed

    private void UpdateFeedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateFeedBtnActionPerformed
        // TODO add your handling code here:
        double Amount, Price = 0;
        boolean isSkipPrice = false;
        
        try {
            Amount = Double.parseDouble(UpdateFeedAmount.getText().trim());
            
            if (Amount < 0) isSkipPrice = true;
            
            if(!isSkipPrice) Price = Double.parseDouble(UpdateFeedPrice.getText().trim());
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Feed Inputs", "Update Feed Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Check Validity
        if (FeedSelectedID < 0) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Feed ID", "Update Feed Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (Amount == 0) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Feed Amount", "Update Water Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (Price < 0) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Feed Price", "Update Feed Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Display Warning
        String _dispwarn = "";
        if (Amount > 0) _dispwarn = "This feed will add to the overall stock\n";
        if (Amount < 0) _dispwarn = "This feed will consume from the overall stock\n";
        
        int res = JOptionPane.showConfirmDialog(rootPane, _dispwarn + "Proceed?", "Warning", JOptionPane.YES_NO_OPTION);
        if (res == JOptionPane.NO_OPTION) return;
        
        // Assemble Class
        FeedModel feed = new FeedModel();
        feed.setId(FeedSelectedID);
        feed.setAmount(Amount);
        feed.setPrice(Price);
        feed.setTimestamp(new Timestamp(new java.util.Date().getTime()));
        
        // Perform Operation
        RepositoryProvider.getProvider().getFeedRepo().updateFeed(feed);
        
        // Success Message
        JOptionPane.showMessageDialog(rootPane, "Feed Entry Updated Successfully", "Feed Info", JOptionPane.INFORMATION_MESSAGE);
        ResetInputs();
        LoadTableAsync(PropType.Feed);
    }//GEN-LAST:event_UpdateFeedBtnActionPerformed

    private void RefreshFeedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshFeedBtnActionPerformed
        // TODO add your handling code here:
        
        LoadTableAsync(PropType.Feed);
    }//GEN-LAST:event_RefreshFeedBtnActionPerformed

    
    // WATER
    
    private void WatersTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WatersTableMousePressed
        // TODO add your handling code here:
        int rowSelected = WatersTable.getSelectedRow();
        
        // Update [Update Water Information]
        UpdateWaterID.setText(WatersTable.getValueAt(rowSelected, 0).toString());
        UpdateWaterAmount.setText(WatersTable.getValueAt(rowSelected, 1).toString());
        
        // Update [Delete Water Information]
        WaterSelectedID = Integer.parseInt(WatersTable.getValueAt(rowSelected, 0).toString());
    }//GEN-LAST:event_WatersTableMousePressed

    private void DeleteWaterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteWaterBtnActionPerformed
        // TODO add your handling code here:
        // Check Validity
        if(WaterSelectedID < 0) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Water ID", "Delete Water Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Assemble Class
        WaterModel water = new WaterModel();
        water.setId(WaterSelectedID);
        
        // Perform Operation
        RepositoryProvider.getProvider().getWaterRepo().deleteWater(water);
        
        // Success Message
        JOptionPane.showMessageDialog(rootPane, "Water Entry Deleted Successfully", "Water Info", JOptionPane.INFORMATION_MESSAGE);
        ResetInputs();
        LoadTableAsync(PropType.Water);
    }//GEN-LAST:event_DeleteWaterBtnActionPerformed

    private void SubmitWaterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitWaterBtnActionPerformed
        // TODO add your handling code here:
        double Amount;
        
        // Determine if Add or Consume
        int sign = (AddConsumeWaterCB.getSelectedIndex() == 1) ? -1 : 1;
        
        try {
            Amount = Double.parseDouble(AddWaterAmount.getText().trim());
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Water Inputs", "Add Water Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Check Validity
        if (Amount <= 0) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Water Amount", "Add Water Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Assemble Class
        WaterModel water = new WaterModel();
        water.setAmount(sign * Amount);
        water.setTimestamp(new Timestamp(new java.util.Date().getTime()));
        
        // Perform Operation
        RepositoryProvider.getProvider().getWaterRepo().addWater(water);
        
        // Success Message
        JOptionPane.showMessageDialog(rootPane, "Water Entry Added Successfully", "Water Info", JOptionPane.INFORMATION_MESSAGE);
        ResetInputs();
        LoadTableAsync(PropType.Water);
    }//GEN-LAST:event_SubmitWaterBtnActionPerformed

    private void UpdateWaterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateWaterBtnActionPerformed
        // TODO add your handling code here:
        double Amount;
        
        try {
            Amount = Double.parseDouble(UpdateWaterAmount.getText().trim());
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Water Input", "Update Water Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Check Validity
        if (WaterSelectedID < 0) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Water ID", "Update Water Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (Amount == 0) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Water Amount", "Update Water Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Display Warning
        String _dispwarn = "";
        if (Amount > 0) _dispwarn = "This water will add to the overall stock\n";
        if (Amount < 0) _dispwarn = "This water will consume from the overall stock\n";
        
        int res = JOptionPane.showConfirmDialog(rootPane, _dispwarn + "Proceed?", "Warning", JOptionPane.YES_NO_OPTION);
        if (res == JOptionPane.NO_OPTION) return;
        
        // Assemble Class
        WaterModel water = new WaterModel();
        water.setId(WaterSelectedID);
        water.setAmount(Amount);
        water.setTimestamp(new Timestamp(new java.util.Date().getTime()));
        
        // Perform Operation
        RepositoryProvider.getProvider().getWaterRepo().updateWater(water);
        
        // Success Message
        JOptionPane.showMessageDialog(rootPane, "Water Entry Updated Successfully", "Water Info", JOptionPane.INFORMATION_MESSAGE);
        ResetInputs();
        LoadTableAsync(PropType.Water);
    }//GEN-LAST:event_UpdateWaterBtnActionPerformed

    private void RefreshWaterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshWaterBtnActionPerformed
        // TODO add your handling code here:
        
        LoadTableAsync(PropType.Water);
    }//GEN-LAST:event_RefreshWaterBtnActionPerformed

    
    // HARVEST
    
    private void HarvestsTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HarvestsTableMousePressed
        // TODO add your handling code here:
        int rowSelected = HarvestsTable.getSelectedRow();
        
        // Update [Update Harvest Information]
        UpdateHarvestID.setText(HarvestsTable.getValueAt(rowSelected, 0).toString());
        UpdateHarvestAmount.setText(HarvestsTable.getValueAt(rowSelected, 1).toString());
        
        // Update [Delete Harvest Information]
        HarvestSelectedID = Integer.parseInt(HarvestsTable.getValueAt(rowSelected, 0).toString());
    }//GEN-LAST:event_HarvestsTableMousePressed

    private void DeleteHarvestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteHarvestBtnActionPerformed
        // TODO add your handling code here:
        // Check Validity
        if(HarvestSelectedID < 0) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Harvest ID", "Delete Harvest Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Assemble Class
        HarvestModel harvest = new HarvestModel();
        harvest.setId(HarvestSelectedID);
        
        // Perform Operation
        RepositoryProvider.getProvider().getHarvestRepo().deleteHarvest(harvest);
        
        // Success Message
        JOptionPane.showMessageDialog(rootPane, "Harvest Entry Deleted Successfully", "Harvest Info", JOptionPane.INFORMATION_MESSAGE);
        ResetInputs();
        LoadTableAsync(PropType.Harvest);
    }//GEN-LAST:event_DeleteHarvestBtnActionPerformed

    private void SubmitHarvestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitHarvestBtnActionPerformed
        // TODO add your handling code here:
        int Amount;
        
        // Determine if Add or Consume
        int sign = (AddConsumeHarvestCB.getSelectedIndex() == 1) ? -1 : 1;
        
        try {
            Amount = Integer.parseInt(AddHarvestAmount.getText().trim());
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Harvest Inputs", "Add Harvest Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Check Validity
        if (Amount <= 0) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Harvest Amount", "Add Harvest Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Assemble Class
        HarvestModel harvest = new HarvestModel();
        harvest.setAmount(sign * Amount);
        harvest.setTimestamp(new Timestamp(new java.util.Date().getTime()));
        
        // Perform Operation
        RepositoryProvider.getProvider().getHarvestRepo().addHarvest(harvest);
        
        // Success Message
        JOptionPane.showMessageDialog(rootPane, "Harvest Entry Added Successfully", "Harvest Info", JOptionPane.INFORMATION_MESSAGE);
        ResetInputs();
        LoadTableAsync(PropType.Harvest);
    }//GEN-LAST:event_SubmitHarvestBtnActionPerformed

    private void UpdateHarvestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateHarvestBtnActionPerformed
        // TODO add your handling code here:
        int Amount;
        
        try {
            Amount = Integer.parseInt(UpdateHarvestAmount.getText().trim());
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Harvest Inputs", "Update Harvest Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Check Validity
        if (HarvestSelectedID < 0) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Harvest ID", "Update Harvest Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (Amount == 0) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Harvest Amount", "Update Harvest Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Display Warning
        String _dispwarn = "";
        if (Amount > 0) _dispwarn = "This harvest will add to the overall stock\n";
        if (Amount < 0) _dispwarn = "This harvest will consume from the overall stock\n";
        
        int res = JOptionPane.showConfirmDialog(rootPane, _dispwarn + "Proceed?", "Warning", JOptionPane.YES_NO_OPTION);
        if (res == JOptionPane.NO_OPTION) return;
        
        // Assemble Class
        HarvestModel harvest = new HarvestModel();
        harvest.setId(HarvestSelectedID);
        harvest.setAmount(Amount);
        harvest.setTimestamp(new Timestamp(new java.util.Date().getTime()));
        
        // Perform Operation
        RepositoryProvider.getProvider().getHarvestRepo().updateHarvest(harvest);
        
        // Success Message
        JOptionPane.showMessageDialog(rootPane, "Harvest Entry Updated Successfully", "Harvest Info", JOptionPane.INFORMATION_MESSAGE);
        ResetInputs();
        LoadTableAsync(PropType.Harvest);
    }//GEN-LAST:event_UpdateHarvestBtnActionPerformed

    private void RefreshHarvestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshHarvestBtnActionPerformed
        // TODO add your handling code here:
        
        LoadTableAsync(PropType.Harvest);
    }//GEN-LAST:event_RefreshHarvestBtnActionPerformed

    private void RefreshTotalAmountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshTotalAmountsActionPerformed
        // TODO add your handling code here:
        LoadTotalsAsync();
    }//GEN-LAST:event_RefreshTotalAmountsActionPerformed

    
    // FEED
    
    private void SubmitFeedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitFeedBtnActionPerformed
        // TODO add your handling code here:
        double Amount, Price = 0;
        boolean isSkipPrice = false;

        // Determine if Add or Consume
        int sign = 1;
        if (AddConsumeFeedCB.getSelectedIndex() == 1) {
            sign = -1;
            isSkipPrice = true;
        }
        
        try {
            Amount = Double.parseDouble(AddFeedAmount.getText().trim());
            if (!isSkipPrice) Price = Double.parseDouble(AddFeedPrice.getText().trim());
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Feed Inputs", "Add Feed Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check Validity
        if (Amount <= 0) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Feed Amount", "Add Feed Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (Price < 0 && !isSkipPrice) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Feed Price", "Add Feed Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Assemble Class
        FeedModel feed = new FeedModel();
        feed.setAmount(sign * Amount);
        feed.setPrice(Price);
        feed.setTimestamp(new Timestamp(new java.util.Date().getTime()));

        // Perform Operation
        RepositoryProvider.getProvider().getFeedRepo().addFeed(feed);

        // Success Message
        JOptionPane.showMessageDialog(rootPane, "Feed Entry Added Successfully", "Feed Info", JOptionPane.INFORMATION_MESSAGE);
        ResetInputs();
        LoadTableAsync(PropType.Feed);
    }//GEN-LAST:event_SubmitFeedBtnActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(new com.formdev.flatlaf.FlatLightLaf());
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenuView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> AddConsumeFeedCB;
    private javax.swing.JComboBox<String> AddConsumeHarvestCB;
    private javax.swing.JComboBox<String> AddConsumeWaterCB;
    private javax.swing.JTextField AddFeedAmount;
    private javax.swing.JTextField AddFeedPrice;
    private javax.swing.JTextField AddHarvestAmount;
    private javax.swing.JTextField AddWaterAmount;
    private javax.swing.JPanel DashboardFragment;
    private javax.swing.JButton DashboardViewBtn;
    private javax.swing.JButton DeleteFeedBtn;
    private javax.swing.JButton DeleteHarvestBtn;
    private javax.swing.JButton DeleteWaterBtn;
    private javax.swing.JPanel FeedFragment;
    private javax.swing.JPanel FeedPanel;
    private javax.swing.JButton FeedViewBtn;
    private javax.swing.JTable FeedsTable;
    private javax.swing.JPanel FragmentManager;
    private javax.swing.JPanel HarvestFragment;
    private javax.swing.JPanel HarvestPanel;
    private javax.swing.JButton HarvestViewBtn;
    private javax.swing.JTable HarvestsTable;
    private javax.swing.JLabel MonthlyAverageFeedConsumptionLabel;
    private javax.swing.JPanel MonthlyFeedPanel;
    private javax.swing.JButton RefreshFeedBtn;
    private javax.swing.JButton RefreshHarvestBtn;
    private javax.swing.JButton RefreshTotalAmounts;
    private javax.swing.JButton RefreshWaterBtn;
    private javax.swing.JPanel Sidebar;
    private javax.swing.JButton SubmitFeedBtn;
    private javax.swing.JButton SubmitHarvestBtn;
    private javax.swing.JButton SubmitWaterBtn;
    private javax.swing.JPanel Topbar;
    private javax.swing.JLabel TotalFeedLabel;
    private javax.swing.JLabel TotalHarvestLabel;
    private javax.swing.JLabel TotalWaterLabel;
    private javax.swing.JTextField UpdateFeedAmount;
    private javax.swing.JButton UpdateFeedBtn;
    private javax.swing.JLabel UpdateFeedID;
    private javax.swing.JTextField UpdateFeedPrice;
    private javax.swing.JTextField UpdateHarvestAmount;
    private javax.swing.JButton UpdateHarvestBtn;
    private javax.swing.JLabel UpdateHarvestID;
    private javax.swing.JTextField UpdateWaterAmount;
    private javax.swing.JButton UpdateWaterBtn;
    private javax.swing.JLabel UpdateWaterID;
    private javax.swing.JPanel WaterFragment;
    private javax.swing.JPanel WaterPanel;
    private javax.swing.JButton WaterViewBtn;
    private javax.swing.JTable WatersTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
